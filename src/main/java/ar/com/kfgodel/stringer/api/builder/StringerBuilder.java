package ar.com.kfgodel.stringer.api.builder;

import ar.com.kfgodel.stringer.api.Stringer;
import ar.com.kfgodel.stringer.api.config.StringerConfiguration;

import java.util.function.Function;
import java.util.function.Supplier;

/**
 * This interfaz defines the available builder methods to create a stringer instance to represent
 * another object
 *
 * Date: 17/03/18 - 22:19
 */
public interface StringerBuilder {

  /**
   * @return The configuration used in this builder to create the stringer
   */
  StringerConfiguration getConfiguration();

  /**
   * Creates the stringer instance according to the definitions indicated in this instance
   * @return A new stringer instance configured
   */
  Stringer build();

  /**
   * Adds an immutable value to the representation generated by the stringer created by this
   * builder
   * @param immutableValue The value to include in the representation
   * @return The modified builder to chain calls
   */
  StringerBuilder with(Object immutableValue);

  /**
   * Adds multiple immutable values to the representation
   * @param immutableValues The values to concatenate
   * @return The modified builder
   */
  StringerBuilder with(Object... immutableValues);

  /**
   * Adds a dynamic piece to the representation to be evaluated each time the stringer is used
   * @param dynamicValue The lambda to call for the dynamically generated piece of representation
   * @return The modified builder
   */
  PartialDefinitionBuilder with(Supplier<?> dynamicValue);

  /**
   * Adds multiple dynamic pieces to the representation to be evaluated each time the stringer is used
   * @param dynamicValues The suppliers for dynamic values
   * @return The modified builder
   */
  StringerBuilder with(Supplier<?>... dynamicValues);

  /**
   * Adds two parts to this builder as a property. Where the value can change over time.<br>
   *   The property name to value separator string is used to separate name from value.<br>
   *     Example: "propertyName: propertyValue"
   * @param propertyName The name of the property
   * @param propertyValue The value
   * @return This instance
   */
  PartialDefinitionBuilder withProperty(String propertyName, Supplier<?> propertyValue);

  /**
   * Adds an immutable value property to this builder
   * @param propertyName The name of the property
   * @param propertyValue The value to be used
   * @return This instance
   */
  StringerBuilder withProperty(String propertyName, Object propertyValue);

  /**
   * Adds another property to this builder, concatenating with previous content using a property separator as prefix.<br>
   *   Example: ", propertyName: propertyValue"
   * @param propertyName The name of the property
   * @param propertyValue The suppliert to get the value everytime
   * @return
   */
  PartialDefinitionBuilder andProperty(String propertyName, Supplier<?> propertyValue);

  /**
   * Adds another property with immutable value
   * @param propertyName The name of the property
   * @param propertyValue The immutable value for the property
   * @return This instance
   */
  StringerBuilder andProperty(String propertyName, Object propertyValue);

  /**
   * Defines a prefix and suffix strings to a block of builder definition, so everything in that
   * block is represented inside graphic delimiters
   * @param prefix The string to use as starting delimiter
   * @param suffix The string to use as ending delimiter
   * @param definition The block to configure this builder content inside the delimiters
   * @return This instance
   */
  StringerBuilder enclosingIn(String prefix, String suffix, Function<StringerBuilder, StringerBuilder> definition);

  /**
   * Defines a piece of representation to be enclosed as represented object state.<br>
   *   The state delimiters are used for the given block.<br>
   *     Exmaple: "{ ...block content... }"
   * @param definition The block to execute as state definition
   * @return This instance
   */
  StringerBuilder enclosingAsState(Function<StringerBuilder, StringerBuilder> definition);

  /**
   * Configures this builder to represent the given object as a class name and several properties using the object fields
   * as its state.<br>
   *   Example: "CustomClass{field1: value1, field2: value2}"
   * @param representable The object to represent
   * @return This instance
   */
  StringerBuilder representing(Object representable);

}
